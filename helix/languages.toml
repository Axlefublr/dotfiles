[[language]]
name = 'hocon'
file-types = [
  'conf',
  { glob = '**/src/*/resources/**/*.conf' },
  { glob = '*scalafmt*.conf' },
  { glob = '*scalafix*.conf' },
]

[[language]]
name = 'ini'
file-types = [
  'ini',
  # Systemd unit files
  'service',
  'automount',
  'device',
  'mount',
  'path',
  'service',
  'slice',
  'socket',
  'swap',
  'target',
  'timer',
  'systemd',
  # Podman quadlets
  'container',
  'volume',
  'kube',
  'network',
  { glob = '.editorconfig' },
  { glob = '.npmrc' },
  { glob = 'hgrc' },
  { glob = 'npmrc' },
  { glob = 'rclone.conf' },
  'properties',
  'cfg',
  'directory',
  'desktop',
]

[[language]]
name = 'just'
file-types = [
  'just',
  { glob = 'justfile' },
  { glob = 'Justfile' },
  { glob = '.justfile' },
  { glob = '.Justfile' },
  { glob = 'globaljustfile' },
]

[[language]]
name = 'nim'
language-servers = ['nimlsp']

[[language]]
name = 'fish'
language-servers = ['fish-lsp']

[language-server.fish-lsp]
command = 'fish-lsp'
args = ['start']

[[language]]
name = 'crystal'
auto-format = false
# grammar = 'crystal'

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
"'" = "'"

[language.indent]
tab-width = 3
unit = '\t'

# [[grammar]]
# name = 'crystal'
# source = { git = 'https://github.com/crystal-lang-tools/tree-sitter', rev = 'c67e9bc000f006212edae98d167c83411a3d8309' }
# source = { git = 'https://github.com/will/tree-sitter-crystal', rev = '15597b307b18028b04d288561f9c29794621562b' }

[[language]]
name = 'ruby'
language-servers = ['solargraph', 'rubocop']
auto-format = true

[language.indent]
tab-width = 3
unit = '\t'

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
'<' = '>'
"'" = "'"
'|' = '|'

[language-server.rubocop]
command = 'rubocop'
args = ['--lsp']

[[language]]
name = 'css'
formatter = { command = 'prettier', args = ['--parser', 'css'] }

[[language]]
name = 'html'
auto-format = false
formatter = { command = 'prettier', args = ['--parser', 'html'] }

[[language]]
name = 'mojo'
file-types = ["mojo", "ðŸ”¥", { glob = 'kitty.conf' }]

[[language]]
name = 'markdown'
file-types = [
  'md',
  'markdown',
  'mdx',
  'mkd',
  'mkdn',
  'mdwn',
  'mdown',
  'markdn',
  'mdtxt',
  'mdtext',
  'workbook',
  { glob = 'PULLREQ_EDITMSG' },
  { glob = '**/magazine/s' },
  { glob = '**/magazine/d' },
  { glob = '**/magazine/c' },
  { glob = '**/magazine/G' },
  { glob = '**/magazine/0' },
]
indent = { tab-width = 2, unit = '  ' }

[[language]]
name = 'lua'
indent = { tab-width = 3, unit = '\t' }
auto-format = true
formatter = { command = 'stylua', args = ['-'] }

[language-server.lua-language-server.config.Lua]
codelens.enable = true
completion.enable = true
completion.callSnippet = 'Replace'
completion.keywordSnippet = 'Disable'
completion.postfix = '@'
completion.showParams = true
completion.workspaceWord = false
completion.showWord = 'Enable'
diagnostics.disable = [
  'lowercase-global',
  'redefined-local',
  'duplicate-set-field',
]
diagnostics.workspaceDelay = 0
format.enable = false
hint.enable = true
hint.arrayIndex = 'Disable'
hint.await = true
hint.paramName = 'Disable'
hint.paramType = true
hint.semicolon = 'Disable'
hint.setType = true
hover.enable = true
hover.expandAlias = true
hover.viewNumber = true
hover.viewString = true
hover.enumsLimit = 9999
hover.previewFields = 9999
semantic.enable = false # TODO: enable this once helix supports them
semantic.keyword = false
semantic.variable = true
type.weakNilCheck = false
workspace.checkThirdParty = false

[[language]]
name = 'rust'

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'|' = '|'
'"' = '"'
'`' = '`'
'<' = '>'

[language-server.rust-analyzer]
command = '/usr/lib/rustup/bin/rust-analyzer'

[language-server.rust-analyzer.config]
checkOnSave.command = 'clippy'
cargo.extraEnv.CARGO_PROFILE_RUST_ANALYZER_INHERITS = 'dev'
cargo.extraArgs = ['--profile', 'rust-analyzer']
cargo.features = 'all'
rustfmt.overrideCommand = ['rustup', 'run', 'nightly', '--', 'rustfmt']
assist.expressionFillDefault = 'default'
assist.importEnforceGranularity = true
assist.importPrefix = 'crate'
inlayHints.bindingModeHints.enable = true
inlayHints.closingBraceHints.minLines = 11
inlayHints.closureCaptureHints.enable = true
inlayHints.closureReturnTypeHints.enable = 'with_block'
inlayHints.closureStyle = 'rust_analyzer'
inlayHints.discriminantHints.enable = 'fieldless'
inlayHints.parameterHints.enable = true
inlayHints.rangeExclusiveHints.enable = true
inlayHints.renderColons = false
inlayHints.expressionAdjustmentHints.enable = 'reborrow'
inlayHints.expressionAdjustmentHints.mode = 'prefer_postfix'
inlayHints.lifetimeElisionHints.enable = 'skip_trivial'
inlayHints.lifetimeElisionHints.useParameterNames = true
lens.run.enable = false
completion.fullFunctionSignatures.enable = true
procMacro.enable = true
typing.autoClosingAngleBrackets.enable = true
semanticHighlighting.operator.specialization.enable = true
semanticHighlighting.punctuation.separate.macro.bang = true
semanticHighlighting.punctuation.enable = true
# workspace.symbol.search.kind = 'onlyTypes'
signatureInfo.documentation.enable = true

[[language]]
name = 'python'
language-servers = ['basedpyright', 'ruff']
auto-format = true

[language-server.basedpyright.config.basedpyright]
analysis.autoImportCompletions = true

[language-server.ruff]
command = 'ruff'
args = ['server']

[language-server.basedpyright]
command = 'basedpyright-langserver'
args = ['--stdio']

[language-server.basedpyright.config]
# ['a', 3, True] will be interpreted as list[str | int | bool] rather than list[Any]
strictListInference = true
# { 'a': 1, 'b': 'c' } will be interpretes as dict[str, int | str] rather than dict[str, Any]
strictDictionaryInference = true
# { 'a', 1, True } will be set[str, int, bool] rather than set[Any]
strictSetInference = true
enableReachabilityAnalysis = true
typeCheckingMode = 'strict'
reportUnusedVariable = false

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
'<' = '>'
"'" = "'"

[[language]]
name = 'toml'
auto-format = true
