// The reason for this file existing is hilarious.
// There's no documention over the variants of each configuration option!
// So rust-analyzer essentially expects your editor to provide you the options and explanations gotten from this json
// What is this json file you might ask?
// Ah yes, it's just a random file I found by `rg 'impl_fn'` in the project repo of rust-analyzer
// So I, as the user, had to *find* and read some json to figure out how to configure the lsp server
// Ridiculous, isn't it?
{
	"properties": {
		"rust-analyzer.inlayHints.lifetimeElisionHints.enable": {
			"type": "string",
			"default": "never",
			"enum": [
				"always",
				"never",
				"skip_trivial"
			],
			"enumDescriptions": [
				"Always show lifetime elision hints.",
				"Never show lifetime elision hints.",
				"Only show lifetime elision hints if a return type is involved."
			],
			"markdownDescription": "Whether to show inlay type hints for elided lifetimes in function signatures."
		},
		"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": {
			"markdownDescription": "Whether to prefer using parameter names as the name for elided lifetime hints if possible.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.inlayHints.maxLength": {
			"minimum": 0,
			"markdownDescription": "Maximum length for inlay hints. Set to null to have an unlimited length.",
			"type": [
				"null",
				"integer"
			],
			"default": 25
		},
		"rust-analyzer.inlayHints.parameterHints.enable": {
			"markdownDescription": "Whether to show function parameter name inlay hints at the call\nsite.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.inlayHints.rangeExclusiveHints.enable": {
			"markdownDescription": "Whether to show exclusive range inlay hints.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.inlayHints.reborrowHints.enable": {
			"type": "string",
			"default": "never",
			"enum": [
				"always",
				"never",
				"mutable"
			],
			"enumDescriptions": [
				"Always show reborrow hints.",
				"Never show reborrow hints.",
				"Only show mutable reborrow hints."
			],
			"markdownDescription": "Whether to show inlay hints for compiler inserted reborrows.\nThis setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#."
		},
		"rust-analyzer.inlayHints.renderColons": {
			"markdownDescription": "Whether to render leading colons for type hints, and trailing colons for parameter hints.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.inlayHints.typeHints.enable": {
			"markdownDescription": "Whether to show inlay type hints for variables.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.inlayHints.typeHints.hideClosureInitialization": {
			"markdownDescription": "Whether to hide inlay type hints for `let` statements that initialize to a closure.\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.inlayHints.typeHints.hideNamedConstructor": {
			"markdownDescription": "Whether to hide inlay type hints for constructors.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.interpret.tests": {
			"markdownDescription": "Enables the experimental support for interpreting tests.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.joinLines.joinAssignments": {
			"markdownDescription": "Join lines merges consecutive declaration and initialization of an assignment.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.joinLines.joinElseIf": {
			"markdownDescription": "Join lines inserts else between consecutive ifs.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.signatureInfo.documentation.enable": {
			"markdownDescription": "Show documentation.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.joinLines.removeTrailingComma": {
			"markdownDescription": "Join lines removes trailing commas.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.typing.autoClosingAngleBrackets.enable": {
			"markdownDescription": "Whether to insert closing angle brackets when typing an opening angle bracket of a generic argument list.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.joinLines.unwrapTrivialBlock": {
			"markdownDescription": "Join lines unwraps trivial blocks.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.workspace.symbol.search.kind": {
			"type": "string",
			"default": "only_types",
			"enum": [
				"only_types",
				"all_symbols"
			],
			"enumDescriptions": [
				"Search for types only.",
				"Search for all symbols kinds."
			],
			"markdownDescription": "Workspace symbol search kind."
		},
		"rust-analyzer.lens.debug.enable": {
			"markdownDescription": "Whether to show `Debug` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.workspace.symbol.search.limit": {
			"minimum": 0,
			"markdownDescription": "Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit.",
			"type": "integer",
			"default": 128
		},
		"rust-analyzer.workspace.symbol.search.scope": {
			"type": "string",
			"default": "workspace",
			"enum": [
				"workspace",
				"workspace_and_dependencies"
			],
			"enumDescriptions": [
				"Search in current workspace only.",
				"Search in current workspace and dependencies."
			],
			"markdownDescription": "Workspace symbol search scope."
		},
		"rust-analyzer.lens.references.adt.enable": {
			"markdownDescription": "Whether to show `References` lens for Struct, Enum, and Union.\nOnly applies when `#rust-analyzer.lens.enable#` is set.",
			"type": "boolean",
			"default": false
		},
		"$generated-end": {},
		"rust-analyzer.lens.references.enumVariant.enable": {
			"markdownDescription": "Whether to show `References` lens for Enum Variants.\nOnly applies when `#rust-analyzer.lens.enable#` is set.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.lens.references.method.enable": {
			"markdownDescription": "Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.lens.references.trait.enable": {
			"markdownDescription": "Whether to show `References` lens for Trait.\nOnly applies when `#rust-analyzer.lens.enable#` is set.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.lens.run.enable": {
			"markdownDescription": "Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.linkedProjects": {
			"markdownDescription": "Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, or JSON objects in `rust-project.json` format.",
			"items": {
				"type": [
					"string",
					"object"
				]
			},
			"type": "array",
			"default": []
		},
		"rust-analyzer.lru.capacity": {
			"minimum": 0,
			"markdownDescription": "Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.",
			"type": [
				"null",
				"integer"
			],
			"default": null
		},
		"rust-analyzer.lru.query.capacities": {
			"markdownDescription": "Sets the LRU capacity of the specified queries.",
			"type": "object",
			"default": {}
		},
		"rust-analyzer.notifications.cargoTomlNotFound": {
			"markdownDescription": "Whether to show `can't find Cargo.toml` error message.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.notifications.unindexedProject": {
			"markdownDescription": "Whether to send an UnindexedProject notification to the client.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.numThreads": {
			"minimum": 0,
			"markdownDescription": "How many worker threads in the main loop. The default `null` means to pick automatically.",
			"type": [
				"null",
				"integer"
			],
			"default": null
		},
		"rust-analyzer.procMacro.attributes.enable": {
			"markdownDescription": "Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.procMacro.enable": {
			"markdownDescription": "Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.procMacro.ignored": {
			"markdownDescription": "These proc-macros will be ignored when trying to expand them.\n\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.",
			"type": "object",
			"default": {}
		},
		"rust-analyzer.procMacro.server": {
			"markdownDescription": "Internal config, path to proc-macro server executable.",
			"type": [
				"null",
				"string"
			],
			"default": null
		},
		"rust-analyzer.references.excludeImports": {
			"markdownDescription": "Exclude imports from find-all-references.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.references.excludeTests": {
			"markdownDescription": "Exclude tests from find-all-references.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.runnables.command": {
			"markdownDescription": "Command to be executed instead of 'cargo' for runnables.",
			"type": [
				"null",
				"string"
			],
			"default": null
		},
		"rust-analyzer.runnables.extraArgs": {
			"markdownDescription": "Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`.",
			"items": {
				"type": "string"
			},
			"type": "array",
			"default": []
		},
		"rust-analyzer.rust.analyzerTargetDir": {
			"anyOf": [
				{
					"type": "null"
				},
				{
					"type": "boolean"
				},
				{
					"type": "string"
				}
			],
			"markdownDescription": "Optional path to a rust-analyzer specific target directory.\nThis prevents rust-analyzer's `cargo check` from locking the `Cargo.lock`\nat the expense of duplicating build artifacts.\n\nSet to `true` to use a subdirectory of the existing target directory or\nset to a path relative to the workspace to use that path.",
			"default": null
		},
		"rust-analyzer.rustc.source": {
			"markdownDescription": "Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted.",
			"type": [
				"null",
				"string"
			],
			"default": null
		},
		"rust-analyzer.rustfmt.extraArgs": {
			"markdownDescription": "Additional arguments to `rustfmt`.",
			"items": {
				"type": "string"
			},
			"type": "array",
			"default": []
		},
		"rust-analyzer.rustfmt.overrideCommand": {
			"markdownDescription": "Advanced option, fully override the command rust-analyzer uses for\nformatting. This should be the equivalent of `rustfmt` here, and\nnot that of `cargo fmt`. The file contents will be passed on the\nstandard input and the formatted result will be read from the\nstandard output.",
			"items": {
				"type": "string"
			},
			"type": [
				"null",
				"array"
			],
			"default": null
		},
		"rust-analyzer.rustfmt.rangeFormatting.enable": {
			"markdownDescription": "Enables the use of rustfmt's unstable range formatting command for the\n`textDocument\/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.semanticHighlighting.doc.comment.inject.enable": {
			"markdownDescription": "Inject additional highlighting into doc comments.\n\nWhen enabled, rust-analyzer will highlight rust source in doc comments as well as intra\ndoc links.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.checkOnSave": {
			"markdownDescription": "Run the check command for diagnostics on save.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.inlayHints.bindingModeHints.enable": {
			"markdownDescription": "Whether to show inlay type hints for binding modes.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.server.extraEnv": {
			"markdownDescription": "Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging.",
			"additionalProperties": {
				"type": [
					"string",
					"number"
				]
			},
			"type": [
				"null",
				"object"
			],
			"default": null
		},
		"rust-analyzer.inlayHints.chainingHints.enable": {
			"markdownDescription": "Whether to show inlay type hints for method chains.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.check.command": {
			"markdownDescription": "Cargo command to use for `cargo check`.",
			"type": "string",
			"default": "check"
		},
		"rust-analyzer.inlayHints.closingBraceHints.enable": {
			"markdownDescription": "Whether to show inlay hints after a closing `}` to indicate what item it belongs to.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.check.extraArgs": {
			"markdownDescription": "Extra arguments for `cargo check`.",
			"items": {
				"type": "string"
			},
			"type": "array",
			"default": []
		},
		"rust-analyzer.inlayHints.closingBraceHints.minLines": {
			"minimum": 0,
			"markdownDescription": "Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\nto always show them).",
			"type": "integer",
			"default": 25
		},
		"rust-analyzer.check.extraEnv": {
			"markdownDescription": "Extra environment variables that will be set when running `cargo check`.\nExtends `#rust-analyzer.cargo.extraEnv#`.",
			"type": "object",
			"default": {}
		},
		"rust-analyzer.inlayHints.closureCaptureHints.enable": {
			"markdownDescription": "Whether to show inlay hints for closure captures.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.check.features": {
			"anyOf": [
				{
					"enum": [
						"all"
					],
					"type": "string",
					"enumDescriptions": [
						"Pass `--all-features` to cargo"
					]
				},
				{
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				{
					"type": "null"
				}
			],
			"markdownDescription": "List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.\n\nSet to `\"all\"` to pass `--all-features` to Cargo.",
			"default": null
		},
		"rust-analyzer.inlayHints.closureReturnTypeHints.enable": {
			"type": "string",
			"default": "never",
			"enum": [
				"always",
				"never",
				"with_block"
			],
			"enumDescriptions": [
				"Always show type hints for return types of closures.",
				"Never show type hints for return types of closures.",
				"Only show type hints for return types of closures with blocks."
			],
			"markdownDescription": "Whether to show inlay type hints for return types of closures."
		},
		"rust-analyzer.debug.engine": {
			"type": "string",
			"default": "auto",
			"enum": [
				"auto",
				"vadimcn.vscode-lldb",
				"ms-vscode.cpptools"
			],
			"description": "Preferred debug engine.",
			"markdownEnumDescriptions": [
				"First try to use [CodeLLDB](https:\/\/marketplace.visualstudio.com\/items?itemName=vadimcn.vscode-lldb), if it's not installed try to use [MS C++ tools](https:\/\/marketplace.visualstudio.com\/items?itemName=ms-vscode.cpptools).",
				"Use [CodeLLDB](https:\/\/marketplace.visualstudio.com\/items?itemName=vadimcn.vscode-lldb)",
				"Use [MS C++ tools](https:\/\/marketplace.visualstudio.com\/items?itemName=ms-vscode.cpptools)"
			]
		},
		"rust-analyzer.semanticHighlighting.strings.enable": {
			"markdownDescription": "Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.check.invocationLocation": {
			"type": "string",
			"default": "workspace",
			"enum": [
				"workspace",
				"root"
			],
			"enumDescriptions": [
				"The command will be executed in the corresponding workspace root.",
				"The command will be executed in the project root."
			],
			"markdownDescription": "Specifies the working directory for running checks.\n- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n    This falls back to \"root\" if `#rust-analyzer.check.invocationStrategy#` is set to `once`.\n- \"root\": run checks in the project's root directory.\nThis config only has an effect when `#rust-analyzer.check.overrideCommand#`\nis set."
		},
		"rust-analyzer.inlayHints.closureStyle": {
			"type": "string",
			"default": "impl_fn",
			"enum": [
				"impl_fn",
				"rust_analyzer",
				"with_id",
				"hide"
			],
			"enumDescriptions": [
				"`impl_fn`: `impl FnMut(i32, u64) -> i8`",
				"`rust_analyzer`: `|i32, u64| -> i8`",
				"`with_id`: `{closure#14352}`, where that id is the unique number of the closure in r-a internals",
				"`hide`: Shows `...` for every closure type"
			],
			"markdownDescription": "Closure notation in type and chaining inlay hints."
		},
		"rust-analyzer.check.noDefaultFeatures": {
			"markdownDescription": "Whether to pass `--no-default-features` to Cargo. Defaults to\n`#rust-analyzer.cargo.noDefaultFeatures#`.",
			"type": [
				"null",
				"boolean"
			],
			"default": null
		},
		"rust-analyzer.debug.sourceFileMap": {
			"const": "auto",
			"description": "Optional source file mappings passed to the debug engine.",
			"type": [
				"object",
				"string"
			],
			"default": {
				"\/rustc\/<id>": "${env:USERPROFILE}\/.rustup\/toolchains\/<toolchain-id>\/lib\/rustlib\/src\/rust"
			}
		},
		"rust-analyzer.check.overrideCommand": {
			"markdownDescription": "Override the command rust-analyzer uses instead of `cargo check` for\ndiagnostics on save. The command is required to output json and\nshould therefore include `--message-format=json` or a similar option\n(if your client supports the `colorDiagnosticOutput` experimental\ncapability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n\nIf you're changing this because you're using some tool wrapping\nCargo, you might also want to change\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n\nIf there are multiple linked projects\/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.check.invocationStrategy#` and\n`#rust-analyzer.check.invocationLocation#`.\n\nIf `$saved_file` is part of the command, rust-analyzer will pass\nthe absolute path of the saved file to the provided command. This is\nintended to be used with non-Cargo build systems.\nNote that `$saved_file` is experimental and may be removed in the futureg.\n\nAn example command would be:\n\n```bash\ncargo check --workspace --message-format=json --all-targets\n```\n.",
			"items": {
				"type": "string"
			},
			"type": [
				"null",
				"array"
			],
			"default": null
		},
		"rust-analyzer.check.targets": {
			"anyOf": [
				{
					"type": "null"
				},
				{
					"type": "string"
				},
				{
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			],
			"markdownDescription": "Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n\nCan be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n\nAliased as `\"checkOnSave.targets\"`.",
			"default": null
		},
		"rust-analyzer.debug.openDebugPane": {
			"default": false,
			"type": "boolean",
			"markdownDescription": "Whether to open up the `Debug Panel` on debugging start."
		},
		"rust-analyzer.inlayHints.discriminantHints.enable": {
			"type": "string",
			"default": "never",
			"enum": [
				"always",
				"never",
				"fieldless"
			],
			"enumDescriptions": [
				"Always show all discriminant hints.",
				"Never show discriminant hints.",
				"Only show discriminant hints on fieldless enum variants."
			],
			"markdownDescription": "Whether to show enum variant discriminant hints."
		},
		"rust-analyzer.debug.engineSettings": {
			"markdownDescription": "Optional settings passed to the debug engine. Example: `{ \"lldb\": { \"terminal\":\"external\"} }`",
			"type": "object",
			"default": {}
		},
		"rust-analyzer.completion.autoimport.enable": {
			"markdownDescription": "Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.restartServerOnConfigChange": {
			"markdownDescription": "Whether to restart the server automatically when certain settings that require a restart are changed.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.completion.autoself.enable": {
			"markdownDescription": "Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.typing.continueCommentsOnNewline": {
			"markdownDescription": "Whether to prefix newlines after comments with the corresponding comment prefix.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.completion.callable.snippets": {
			"type": "string",
			"default": "fill_arguments",
			"enum": [
				"fill_arguments",
				"add_parentheses",
				"none"
			],
			"enumDescriptions": [
				"Add call parentheses and pre-fill arguments.",
				"Add call parentheses.",
				"Do no snippet completions for callables."
			],
			"markdownDescription": "Whether to add parenthesis and argument snippets when completing function."
		},
		"rust-analyzer.diagnostics.previewRustcOutput": {
			"markdownDescription": "Whether to show the main part of the rendered rustc output of a diagnostic message.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.diagnostics.useRustcErrorCode": {
			"markdownDescription": "Whether to show diagnostics using the original rustc error code. If this is false, all rustc diagnostics will have the code 'rustc(Click for full compiler diagnostics)'",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.discoverProjectRunner": {
			"markdownDescription": "Sets the extension responsible for determining which extension the rust-analyzer extension uses to generate `rust-project.json` files. This should should only be used\n if a build system like Buck or Bazel is also in use.",
			"type": [
				"null",
				"string"
			],
			"default": null
		},
		"rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe": {
			"markdownDescription": "Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.completion.fullFunctionSignatures.enable": {
			"markdownDescription": "Whether to show full function\/method signatures in completion docs.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.inlayHints.expressionAdjustmentHints.mode": {
			"type": "string",
			"default": "prefix",
			"enum": [
				"prefix",
				"postfix",
				"prefer_prefix",
				"prefer_postfix"
			],
			"enumDescriptions": [
				"Always show adjustment hints as prefix (`*expr`).",
				"Always show adjustment hints as postfix (`expr.*`).",
				"Show prefix or postfix depending on which uses less parenthesis, preferring prefix.",
				"Show prefix or postfix depending on which uses less parenthesis, preferring postfix."
			],
			"markdownDescription": "Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc)."
		},
		"rust-analyzer.showRequestFailedErrorNotification": {
			"markdownDescription": "Whether to show error notifications for failing requests.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.completion.postfix.enable": {
			"markdownDescription": "Whether to show postfix snippets like `dbg`, `if`, `not`, etc.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.completion.privateEditable.enable": {
			"markdownDescription": "Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.assist.emitMustUse": {
			"markdownDescription": "Whether to insert #[must_use] when generating `as_` methods\nfor enum variants.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.completion.snippets.custom": {
			"markdownDescription": "Custom completion snippets.",
			"type": "object",
			"default": {
				"Some": {
					"postfix": "some",
					"body": "Some(${receiver})",
					"description": "Wrap the expression in an `Option::Some`",
					"scope": "expr"
				},
				"Rc::new": {
					"scope": "expr",
					"postfix": "rc",
					"body": "Rc::new(${receiver})",
					"description": "Put the expression into an `Rc`",
					"requires": "std::rc::Rc"
				},
				"Ok": {
					"postfix": "ok",
					"body": "Ok(${receiver})",
					"description": "Wrap the expression in a `Result::Ok`",
					"scope": "expr"
				},
				"Err": {
					"postfix": "err",
					"body": "Err(${receiver})",
					"description": "Wrap the expression in a `Result::Err`",
					"scope": "expr"
				},
				"Box::pin": {
					"scope": "expr",
					"postfix": "pinbox",
					"body": "Box::pin(${receiver})",
					"description": "Put the expression into a pinned `Box`",
					"requires": "std::boxed::Box"
				},
				"Arc::new": {
					"scope": "expr",
					"postfix": "arc",
					"body": "Arc::new(${receiver})",
					"description": "Put the expression into an `Arc`",
					"requires": "std::sync::Arc"
				}
			}
		},
		"rust-analyzer.assist.expressionFillDefault": {
			"type": "string",
			"default": "todo",
			"enum": [
				"todo",
				"default"
			],
			"enumDescriptions": [
				"Fill missing expressions with the `todo` macro",
				"Fill missing expressions with reasonable defaults, `new` or `default` constructors."
			],
			"markdownDescription": "Placeholder expression to use for missing expressions in assists."
		},
		"rust-analyzer.cachePriming.enable": {
			"markdownDescription": "Warm up caches on project load.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.cachePriming.numThreads": {
			"type": "number",
			"minimum": 0,
			"maximum": 255,
			"default": 0,
			"markdownDescription": "How many worker threads to handle priming caches. The default `0` means to pick automatically."
		},
		"rust-analyzer.cargo.autoreload": {
			"markdownDescription": "Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` or `.cargo\/config.toml` changes.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.cargo.buildScripts.enable": {
			"markdownDescription": "Run build scripts (`build.rs`) for more precise code analysis.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.cargo.buildScripts.invocationLocation": {
			"type": "string",
			"default": "workspace",
			"enum": [
				"workspace",
				"root"
			],
			"enumDescriptions": [
				"The command will be executed in the corresponding workspace root.",
				"The command will be executed in the project root."
			],
			"markdownDescription": "Specifies the working directory for running build scripts.\n- \"workspace\": run build scripts for a workspace in the workspace's root directory.\n    This is incompatible with `#rust-analyzer.cargo.buildScripts.invocationStrategy#` set to `once`.\n- \"root\": run build scripts in the project's root directory.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set."
		},
		"rust-analyzer.cargo.buildScripts.invocationStrategy": {
			"type": "string",
			"default": "per_workspace",
			"enum": [
				"per_workspace",
				"once"
			],
			"enumDescriptions": [
				"The command will be executed for each workspace.",
				"The command will be executed once."
			],
			"markdownDescription": "Specifies the invocation strategy to use when running the build scripts command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set."
		},
		"rust-analyzer.cargo.buildScripts.overrideCommand": {
			"markdownDescription": "Override the command rust-analyzer uses to run build scripts and\nbuild procedural macros. The command is required to output json\nand should therefore include `--message-format=json` or a similar\noption.\n\nIf there are multiple linked projects\/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.cargo.buildScripts.invocationStrategy#` and\n`#rust-analyzer.cargo.buildScripts.invocationLocation#`.\n\nBy default, a cargo invocation will be constructed for the configured\ntargets and features, with the following base command line:\n\n```bash\ncargo check --quiet --workspace --message-format=json --all-targets\n```\n.",
			"items": {
				"type": "string"
			},
			"type": [
				"null",
				"array"
			],
			"default": null
		},
		"rust-analyzer.cargo.buildScripts.rebuildOnSave": {
			"markdownDescription": "Rerun proc-macros building\/build-scripts running when proc-macro\nor build-script sources change and are saved.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.completion.termSearch.enable": {
			"markdownDescription": "Whether to enable term search based snippets like `Some(foo.bar().baz())`.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.cargo.buildScripts.useRustcWrapper": {
			"markdownDescription": "Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid checking unnecessary things.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.diagnostics.disabled": {
			"uniqueItems": true,
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			},
			"markdownDescription": "List of rust-analyzer diagnostics to disable."
		},
		"rust-analyzer.cargo.cfgs": {
			"markdownDescription": "List of cfg options to enable with the given values.",
			"type": "object",
			"default": {}
		},
		"rust-analyzer.diagnostics.enable": {
			"markdownDescription": "Whether to show native rust-analyzer diagnostics.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.cargo.extraArgs": {
			"markdownDescription": "Extra arguments that are passed to every cargo invocation.",
			"items": {
				"type": "string"
			},
			"type": "array",
			"default": []
		},
		"rust-analyzer.diagnostics.experimental.enable": {
			"markdownDescription": "Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.cargo.extraEnv": {
			"markdownDescription": "Extra environment variables that will be set when running cargo, rustc\nor other commands within the workspace. Useful for setting RUSTFLAGS.",
			"type": "object",
			"default": {}
		},
		"rust-analyzer.diagnostics.remapPrefix": {
			"markdownDescription": "Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.",
			"type": "object",
			"default": {}
		},
		"rust-analyzer.cargo.features": {
			"anyOf": [
				{
					"enum": [
						"all"
					],
					"type": "string",
					"enumDescriptions": [
						"Pass `--all-features` to cargo"
					]
				},
				{
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			],
			"markdownDescription": "List of features to activate.\n\nSet this to `\"all\"` to pass `--all-features` to cargo.",
			"default": []
		},
		"rust-analyzer.server.path": {
			"markdownDescription": "Path to rust-analyzer executable (points to bundled binary by default).",
			"default": null,
			"type": [
				"null",
				"string"
			],
			"scope": "machine-overridable"
		},
		"rust-analyzer.cargo.noDefaultFeatures": {
			"markdownDescription": "Whether to pass `--no-default-features` to cargo.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.cargo.sysroot": {
			"markdownDescription": "Relative path to the sysroot, or \"discover\" to try to automatically find it via\n\"rustc --print sysroot\".\n\nUnsetting this disables sysroot loading.\n\nThis option does not take effect until rust-analyzer is restarted.",
			"type": [
				"null",
				"string"
			],
			"default": "discover"
		},
		"rust-analyzer.files.watcher": {
			"type": "string",
			"default": "client",
			"enum": [
				"client",
				"server"
			],
			"enumDescriptions": [
				"Use the client (editor) to watch files for changes",
				"Use server-side file watching"
			],
			"markdownDescription": "Controls file watching implementation."
		},
		"rust-analyzer.cargo.sysrootQueryMetadata": {
			"markdownDescription": "Whether to run cargo metadata on the sysroot library allowing rust-analyzer to analyze\nthird-party dependencies of the standard libraries.\n\nThis will cause `cargo` to create a lockfile in your sysroot directory. rust-analyzer\nwill attempt to clean up afterwards, but nevertheless requires the location to be\nwritable to.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.cargo.sysrootSrc": {
			"markdownDescription": "Relative path to the sysroot library sources. If left unset, this will default to\n`{cargo.sysroot}\/lib\/rustlib\/src\/rust\/library`.\n\nThis option does not take effect until rust-analyzer is restarted.",
			"type": [
				"null",
				"string"
			],
			"default": null
		},
		"rust-analyzer.cargo.target": {
			"markdownDescription": "Compilation target override (target triple).",
			"type": [
				"null",
				"string"
			],
			"default": null
		},
		"rust-analyzer.cargo.unsetTest": {
			"markdownDescription": "Unsets the implicit `#[cfg(test)]` for the specified crates.",
			"items": {
				"type": "string"
			},
			"type": "array",
			"default": [
				"core"
			]
		},
		"rust-analyzer.highlightRelated.exitPoints.enable": {
			"markdownDescription": "Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.highlightRelated.references.enable": {
			"markdownDescription": "Enables highlighting of related references while the cursor is on any identifier.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.highlightRelated.yieldPoints.enable": {
			"markdownDescription": "Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.signatureInfo.detail": {
			"type": "string",
			"default": "full",
			"enum": [
				"full",
				"parameters"
			],
			"enumDescriptions": [
				"Show the entire signature.",
				"Show only the parameters."
			],
			"markdownDescription": "Show full signature of the callable. Only shows parameters if disabled."
		},
		"rust-analyzer.hover.actions.debug.enable": {
			"markdownDescription": "Whether to show `Debug` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.semanticHighlighting.punctuation.specialization.enable": {
			"markdownDescription": "Use specialized semantic tokens for punctuation.\n\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\nof the generic `punctuation` token type.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.hover.actions.enable": {
			"markdownDescription": "Whether to show HoverActions in Rust files.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.lens.enable": {
			"markdownDescription": "Whether to show CodeLens in Rust files.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.hover.actions.gotoTypeDef.enable": {
			"markdownDescription": "Whether to show `Go to Type Definition` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.lens.forceCustomCommands": {
			"markdownDescription": "Internal config: use custom client-side commands even when the\nclient doesn't set the corresponding capability.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.hover.actions.implementations.enable": {
			"markdownDescription": "Whether to show `Implementations` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.lens.implementations.enable": {
			"markdownDescription": "Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.hover.actions.references.enable": {
			"markdownDescription": "Whether to show `References` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.lens.location": {
			"type": "string",
			"default": "above_name",
			"enum": [
				"above_name",
				"above_whole_item"
			],
			"enumDescriptions": [
				"Render annotations above the name of the item.",
				"Render annotations above the whole item, including documentation comments and attributes."
			],
			"markdownDescription": "Where to render annotations."
		},
		"rust-analyzer.hover.actions.run.enable": {
			"markdownDescription": "Whether to show `Run` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang": {
			"markdownDescription": "When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\ncalls.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.hover.documentation.enable": {
			"markdownDescription": "Whether to show documentation on hover.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.semanticHighlighting.punctuation.enable": {
			"markdownDescription": "Use semantic tokens for punctuation.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\nthey are tagged with modifiers or have a special role.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.hover.documentation.keywords.enable": {
			"markdownDescription": "Whether to show keyword hover popups. Only applies when\n`#rust-analyzer.hover.documentation.enable#` is set.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.semanticHighlighting.operator.specialization.enable": {
			"markdownDescription": "Use specialized semantic tokens for operators.\n\nWhen enabled, rust-analyzer will emit special token types for operator tokens instead\nof the generic `operator` token type.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.hover.links.enable": {
			"markdownDescription": "Use markdown syntax for links on hover.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.semanticHighlighting.operator.enable": {
			"markdownDescription": "Use semantic tokens for operators.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\nthey are tagged with modifiers.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.hover.memoryLayout.alignment": {
			"anyOf": [
				{
					"type": "null"
				},
				{
					"enum": [
						"both",
						"decimal",
						"hexadecimal"
					],
					"type": "string",
					"enumDescriptions": [
						"Render as 12 (0xC)",
						"Render as 12",
						"Render as 0xC"
					]
				}
			],
			"markdownDescription": "How to render the align information in a memory layout hover.",
			"default": "hexadecimal"
		},
		"rust-analyzer.semanticHighlighting.nonStandardTokens": {
			"markdownDescription": "Whether the server is allowed to emit non-standard tokens and modifiers.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.check.workspace": {
			"markdownDescription": "Whether `--workspace` should be passed to `cargo check`.\nIf false, `-p <package>` will be passed instead.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.imports.preferPrelude": {
			"markdownDescription": "Whether to prefer import paths containing a `prelude` module.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.cargoRunner": {
			"description": "Custom cargo runner extension ID.",
			"type": [
				"null",
				"string"
			],
			"default": null
		},
		"rust-analyzer.statusBar.clickAction": {
			"enumDescriptions": [
				"Stop Server",
				"Open Logs"
			],
			"default": "openLogs",
			"enum": [
				"stopServer",
				"openLogs"
			],
			"type": "string",
			"markdownDescription": "Action to run when clicking the extension status bar item."
		},
		"rust-analyzer.runnables.extraEnv": {
			"anyOf": [
				{
					"type": "null"
				},
				{
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"env": {
								"type": "object",
								"description": "Variables in form of { \"key\": \"value\"}"
							},
							"platform": {
								"markdownDescription": "Platform(s) filter like \"win32\" or [\"linux\", \"win32\"]. See [process.platform](https:\/\/nodejs.org\/api\/process.html#processplatform) values.",
								"type": [
									"null",
									"string",
									"array"
								],
								"default": null
							},
							"mask": {
								"type": "string",
								"description": "Runnable name mask"
							}
						}
					}
				},
				{
					"type": "object",
					"description": "Variables in form of { \"key\": \"value\"}"
				}
			],
			"markdownDescription": "Environment variables passed to the runnable launched using `Test` or `Debug` lens or `rust-analyzer.run` command.",
			"default": null
		},
		"rust-analyzer.hover.memoryLayout.enable": {
			"markdownDescription": "Whether to show memory layout data on hover.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.check.invocationStrategy": {
			"type": "string",
			"default": "per_workspace",
			"enum": [
				"per_workspace",
				"once"
			],
			"enumDescriptions": [
				"The command will be executed for each workspace.",
				"The command will be executed once."
			],
			"markdownDescription": "Specifies the invocation strategy to use when running the check command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.check.overrideCommand#`\nis set."
		},
		"rust-analyzer.hover.memoryLayout.niches": {
			"markdownDescription": "How to render the niche information in a memory layout hover.",
			"type": [
				"null",
				"boolean"
			],
			"default": false
		},
		"rust-analyzer.check.allTargets": {
			"markdownDescription": "Check all targets and tests (`--all-targets`).",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.hover.memoryLayout.offset": {
			"anyOf": [
				{
					"type": "null"
				},
				{
					"enum": [
						"both",
						"decimal",
						"hexadecimal"
					],
					"type": "string",
					"enumDescriptions": [
						"Render as 12 (0xC)",
						"Render as 12",
						"Render as 0xC"
					]
				}
			],
			"markdownDescription": "How to render the offset information in a memory layout hover.",
			"default": "hexadecimal"
		},
		"rust-analyzer.trace.extension": {
			"type": "boolean",
			"description": "Enable logging of VS Code extensions itself.",
			"default": false
		},
		"rust-analyzer.hover.memoryLayout.size": {
			"anyOf": [
				{
					"type": "null"
				},
				{
					"enum": [
						"both",
						"decimal",
						"hexadecimal"
					],
					"type": "string",
					"enumDescriptions": [
						"Render as 12 (0xC)",
						"Render as 12",
						"Render as 0xC"
					]
				}
			],
			"markdownDescription": "How to render the size information in a memory layout hover.",
			"default": "both"
		},
		"rust-analyzer.runnables.problemMatcher": {
			"markdownDescription": "Problem matchers to use for `rust-analyzer.run` command, eg `[\"$rustc\", \"$rust-panic\"]`.",
			"items": {
				"type": "string"
			},
			"type": "array",
			"default": [
				"$rustc"
			]
		},
		"rust-analyzer.imports.granularity.enforce": {
			"markdownDescription": "Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.showDependenciesExplorer": {
			"markdownDescription": "Whether to show the dependencies view.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.imports.granularity.group": {
			"type": "string",
			"default": "crate",
			"enum": [
				"preserve",
				"crate",
				"module",
				"item",
				"one"
			],
			"enumDescriptions": [
				"Do not change the granularity of any imports and preserve the original structure written by the developer.",
				"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.",
				"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.",
				"Flatten imports so that each has its own use statement.",
				"Merge all imports into a single use statement as long as they have the same visibility and attributes."
			],
			"markdownDescription": "How imports should be grouped into use statements."
		},
		"rust-analyzer.check.ignore": {
			"uniqueItems": true,
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			},
			"markdownDescription": "List of `cargo check` (or other command specified in `check.command`) diagnostics to ignore.\n\nFor example for `cargo check`: `dead_code`, `unused_imports`, `unused_variables`,..."
		},
		"rust-analyzer.trace.server": {
			"enumDescriptions": [
				"No traces",
				"Error only",
				"Full log"
			],
			"scope": "window",
			"default": "off",
			"enum": [
				"off",
				"messages",
				"verbose"
			],
			"description": "Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users).",
			"type": "string"
		},
		"rust-analyzer.diagnostics.warningsAsHint": {
			"markdownDescription": "List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`.",
			"items": {
				"type": "string"
			},
			"type": "array",
			"default": []
		},
		"rust-analyzer.diagnostics.warningsAsInfo": {
			"markdownDescription": "List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`.",
			"items": {
				"type": "string"
			},
			"type": "array",
			"default": []
		},
		"rust-analyzer.files.excludeDirs": {
			"markdownDescription": "These directories will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`.",
			"items": {
				"type": "string"
			},
			"type": "array",
			"default": []
		},
		"rust-analyzer.highlightRelated.closureCaptures.enable": {
			"markdownDescription": "Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.highlightRelated.breakPoints.enable": {
			"markdownDescription": "Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.showUnlinkedFileNotification": {
			"markdownDescription": "Whether to show a notification for unlinked files asking the user to add the corresponding Cargo.toml to the linked projects setting.",
			"type": "boolean",
			"default": true
		},
		"$generated-start": {},
		"rust-analyzer.imports.group.enable": {
			"markdownDescription": "Group inserted imports by the [following order](https:\/\/rust-analyzer.github.io\/manual.html#auto-import). Groups are separated by newlines.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.imports.prefix": {
			"type": "string",
			"default": "plain",
			"enum": [
				"plain",
				"self",
				"crate"
			],
			"enumDescriptions": [
				"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.",
				"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.",
				"Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."
			],
			"markdownDescription": "The path structure for newly inserted paths to use."
		},
		"rust-analyzer.imports.merge.glob": {
			"markdownDescription": "Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.",
			"type": "boolean",
			"default": true
		},
		"rust-analyzer.completion.limit": {
			"minimum": 0,
			"markdownDescription": "Maximum number of completions to return. If `None`, the limit is infinite.",
			"type": [
				"null",
				"integer"
			],
			"default": null
		},
		"rust-analyzer.imports.preferNoStd": {
			"markdownDescription": "Prefer to unconditionally use imports of the core and alloc crate, over the std crate.",
			"type": "boolean",
			"default": false
		},
		"rust-analyzer.inlayHints.expressionAdjustmentHints.enable": {
			"type": "string",
			"default": "never",
			"enum": [
				"always",
				"never",
				"reborrow"
			],
			"enumDescriptions": [
				"Always show all adjustment hints.",
				"Never show adjustment hints.",
				"Only show auto borrow and dereference adjustment hints."
			],
			"markdownDescription": "Whether to show inlay hints for type adjustments."
		},
		"rust-analyzer.inlayHints.implicitDrops.enable": {
			"markdownDescription": "Whether to show implicit drop hints.",
			"type": "boolean",
			"default": false
		}
	},
	"type": "object",
	"title": "rust-analyzer"
}